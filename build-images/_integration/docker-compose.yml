version: '3.7'

x-config:
  # Amount of seconds traces will be saved in Cassandra database
  - &cassandra-trace-ttl 7200

  # HTTP_PROXY and http_proxy environment variables to be injected for building images
  - &http_proxy ${HTTP_PROXY:-}               # take $HTTP_PROXY env var

  # HTTPS_PROXY and https_proxy environment variables to be injected for building images
  - &https_proxy ${HTTPS_PROXY:-}

  # NO_PROXY and no_proxy environment variables to be injected for building images
  - &no_proxy ${NO_PROXY:-localhost,127.0.0.1}


x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "1"


volumes:
  cassandra-node-data:
    driver: local
  prometheus-data:
    driver: local
  grafana_localstate:
    driver: local
  neo4j-data:
    driver: local


services:
  ##
  ## HTTP PROXY FOR SERVICES
  ## Used to create some traces
  reverse-proxy:
    image: traefik:montdor
    restart: always
    # depends_on:
    #   - traefik-jaeger-agent
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
      - "7687:7687/tcp"
      - "9411:9411/tcp"
      - "14250:14250/tcp"
      - "14267:14267/tcp"
      - "14268:14268/tcp"
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    command: [
      '--api', '--api.insecure',
      '--log', '--accesslog',
      '--entrypoints.http.address=:80',
      '--entrypoints.https.address=:443',
      '--entrypoints.traefik.address=:8080',
      '--entrypoints.neo4j-bolt.address=:7687',
      '--entrypoints.traces-zipkin.address=:9411',
      '--entrypoints.traces-grpc.address=:14250',
      '--entrypoints.traces-thrift.address=:14267',
      '--entrypoints.traces-http.address=:14268',
      '--providers.docker',
      '--providers.docker.exposedbydefault=false',
      '--tracing.jaeger',
      '--tracing.jaeger.samplingServerURL=http://traefik-jaeger-agent:5778/sampling',
      '--tracing.jaeger.samplingType=const',
      '--tracing.jaeger.samplingParam=1',
      '--tracing.jaeger.localAgentHostPort=traefik-jaeger-agent:6831',
      '--metrics.prometheus',
      '--metrics.prometheus.entrypoint=traefik',
      # '--tracing.jaeger.collector.endpoint=http://jaeger-collector:14268/api/traces?format=jaeger.thrift',
    ]
    logging: *default-logging


  traefik-jaeger-agent:
    image: jaegertracing/jaeger-agent:1.15
    restart: always
    depends_on:
      - jaeger-collector
      - jaeger-query
    expose:
      - "5778"
      - "6831"
      - "14271"
    command: [
      "--admin-http-port=14271",
      "--http-server.host-port=0.0.0.0:5778",
      "--reporter.type=tchannel",
      "--reporter.tchannel.host-port=jaeger-collector:14267",
      "--processor.jaeger-compact.server-host-port=traefik-jaeger-agent:6831",
    ]
    logging: *default-logging

  ##
  ## CASSANDRA 1-NODE CLUSTER
  ## 1 Node Cassandra cluster with schema Initialization
  cassandra-node:
    image: cassandra:3
    restart: always
    expose:
      - '7000'    # inter-node communication
      - '7001'    # TLS inter-node communication
      - '7199'    # JMX
      - '9042'    # CQL
      - '9160'    # Thrift Service
    volumes:
      - type: volume
        source: cassandra-node-data
        target: /var/lib/cassandra
    environment:
      CASSANDRA_LISTEN_ADDRESS: auto
      CASSANDRA_CLUSTER_NAME: docker-cluster
      CASSANDRA_DC: dc1
      CASSANDRA_RACK: rack1
    logging: *default-logging


  cassandra-schema:
    image: cassandra:3
    restart: on-failure
    depends_on:
      - cassandra-node
    volumes:
      - type: bind
        source: ./cassandra/schema
        target: /schema
    environment:
      MODE: test
      DATACENTER: dc1
      TARGET: cassandra-node
      TRACE_TTL: *cassandra-trace-ttl
    working_dir: /schema
    entrypoint: [ "/bin/bash" ]
    command: [
      "/schema/create.sh"
    ]
    logging: *default-logging


  ##
  ## Neo4j
  ##
  neo4j:
    build:
      context: ../neo4j/
      dockerfile: Dockerfile
      args:
        HTTP_PROXY: *http_proxy
        HTTPS_PROXY: *https_proxy
        NO_PROXY: *no_proxy
        http_proxy: *http_proxy
        https_proxy: *https_proxy
        no_proxy: *no_proxy
    restart: always
    expose:
      - "7687"
      - "7474"
    volumes:
      - type: volume
        source: neo4j-data
        target: /data
      - type: bind
        source: ./neo4j/logs
        target: /var/lib/neo4j/logs
    environment:
      NEO4J_AUTH: none
      NEO4J_apoc_ttl_enabled: "true"
      NEO4J_dbms_memory_heap_initial__size: 512Mi
      NEO4J_dbms_memory_heap_max__size: 512Mi
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms_tx__log_rotation_retention__policy: 2 days
      NEO4J_dbms_security_procedures_unrestricted: algo.*,apoc.*
      #NEO4J_dbms_connector_bolt_tls__level: OPTIONAL
      NEO4J_dbms_connector_bolt_listen__address: 0.0.0.0:7687
      NEO4J_dbms_cypher_min_replan_interval: 10s
      #NEO4J_metrics_prometheus_enabled: "true"       ## Only available in entreprise edition
      #NEO4J_metrics_prometheus_endpoint: neo4j:2004  ## Only available in entreprise edition
    ulimits:
      nofile: 40000
    labels:
      traefik.enable: "true"
      traefik.http.routers.neo4j-browser-router.entrypoints: 'http,https'
      traefik.http.routers.neo4j-browser-router.rule: >-
        PathPrefix(`/browser/`) || (PathPrefix(`/db/`) && Headers(`Content-Type`, `application/json`) && Headers(`Accept`, `application/json`))
      traefik.http.routers.neo4j-browser-router.service: neo4j-svc
      traefik.http.services.neo4j-svc.loadbalancer.server.port: "7474"

      # Still an HTTP Router for bolt "binary protocol" because it is built on top ow WS
      traefik.http.routers.neo4j-bolt-router.rule: 'Host(`${ADVERTISED_HOST:-localhost}`)'
      traefik.http.routers.neo4j-bolt-router.entrypoints: "neo4j-bolt"
      traefik.http.routers.neo4j-bolt-router.service: "neo4j-bolt-svc"
      traefik.http.services.neo4j-bolt-svc.loadbalancer.server.port: "7687"
    logging: *default-logging


  ##
  ## JAEGER
  ##
  jaeger-collector:
    image: jaegertracing/jaeger-collector:1.16
    restart: always
    depends_on:
      - cassandra-node
    expose:
      - "9411"
      - "14250"
      - "14267"
      - "14268"
      - '14269'
    environment:
      SPAN_STORAGE_TYPE: cassandra
    command: [
      "--admin-http-port=14269",
      "--collector.zipkin.http-port=9411",
      "--collector.grpc-port=14250",
      "--collector.port=14267",
      "--collector.http-port=14268",
      "--cassandra.keyspace=jaeger_v1_dc1",
      "--cassandra.servers=cassandra-node",
    ]
    labels:
      traefik.enable: "true"

      traefik.http.routers.jaeger-collector-zipkin-router.entrypoints: "traces-zipkin"
      traefik.http.routers.jaeger-collector-zipkin-router.service: "jaeger-collector-zipkin-svc"
      traefik.http.services.jaeger-collector-zipkin-svc.loadbalancer.server.port: "9411"
      traefik.http.services.jaeger-collector-zipkin-svc.loadbalancer.healthcheck.path: "/"
      traefik.http.services.jaeger-collector-zipkin-svc.loadbalancer.healthcheck.port: "14269"

      traefik.http.routers.jaeger-collector-grpc-router.entrypoints: "traces-grpc"
      traefik.http.routers.jaeger-collector-grpc-router.service: "jaeger-collector-grpc-svc"
      traefik.http.services.jaeger-collector-grpc-svc.loadbalancer.server.port: "14250"
      traefik.http.services.jaeger-collector-grpc-svc.loadbalancer.healthcheck.path: "/"
      traefik.http.services.jaeger-collector-grpc-svc.loadbalancer.healthcheck.port: "14269"

      traefik.tcp.routers.jaeger-collector-thrift-router.rule: 'HostSNI(`${ADVERTISED_HOST:-localhost}`)'
      traefik.tcp.routers.jaeger-collector-thrift-router.entrypoints: "traces-thrift"
      traefik.tcp.routers.jaeger-collector-thrift-router.service: "jaeger-collector-thrift-svc"
      traefik.tcp.services.jaeger-collector-thrift-svc.loadbalancer.server.port: "14267"

      traefik.http.routers.jaeger-collector-http-router.entrypoints: "traces-http"
      traefik.http.routers.jaeger-collector-http-router.service: "jaeger-collector-http-svc"
      traefik.http.services.jaeger-collector-http-svc.loadbalancer.server.port: "14268"
      traefik.http.services.jaeger-collector-http-svc.loadbalancer.healthcheck.path: "/"
      traefik.http.services.jaeger-collector-http-svc.loadbalancer.healthcheck.port: "14269"
    logging: *default-logging


  jaeger-query:
    image: jaegertracing/jaeger-query:1.16
    restart: always
    depends_on:
      - cassandra-node
    expose:
      - '16687'
      - '16686'
    environment:
      SPAN_STORAGE_TYPE: cassandra
    command: [
      "--admin-http-port=16687",
      "--query.port=16686",
      "--query.base-path=/jaeger",
      "--cassandra.servers=cassandra-node",
      "--cassandra.keyspace=jaeger_v1_dc1"
    ]
    labels:
      traefik.enable: "true"
      traefik.http.routers.jaeger-query.entrypoints: 'http,https'
      traefik.http.routers.jaeger-query.rule: 'PathPrefix(`/jaeger/`)'
      traefik.http.services.jaeger-query-svc.loadbalancer.server.port: "16686"
      traefik.http.services.jaeger-query-svc.loadbalancer.healthcheck.path: "/"
      traefik.http.services.jaeger-query-svc.loadbalancer.healthcheck.port: "16687"
    logging: *default-logging


  ##
  ## PROMETHEUS
  ##
  prometheus:
    image: prom/prometheus
    restart: always
    expose:
      - "9090"
    volumes:
      - type: bind
        source: ./prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
      - type: volume
        source: prometheus-data
        target: /data
    command: [
      "--config.file=/etc/prometheus/prometheus.yml",
      "--web.listen-address=0.0.0.0:9090",
      "--web.external-url=http://${ADVERTISED_HOST:-localhost}/prometheus",
    ]
    labels:
      traefik.enable: "true"
      traefik.http.routers.prometheus.entrypoints: 'http,https'
      traefik.http.routers.prometheus.rule: 'PathPrefix(`/prometheus/`)'
      traefik.http.services.prometheus-svc.loadbalancer.server.port: "9090"
    logging: *default-logging


  cadvisor:
    image: google/cadvisor:latest
    restart: always
    expose:
      - '8080'
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: yes
      - type: bind
        source: /var/run/
        target: /var/run/
        read_only: yes
      - type: bind
        source: /sys
        target: /sys
        read_only: yes
      - type: bind
        source: /var/lib/docker
        target: /var/lib/docker
        read_only: yes
      - type: bind
        source: /dev/disk
        target: /dev/disk
        read_only: yes
    logging: *default-logging


  node-exporter:
    image: prom/node-exporter
    restart: always
    expose:
      - '9100'
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: yes
      - type: bind
        source: /proc
        target: /host/proc
        read_only: yes
      - type: bind
        source: /sys
        target: /host/sys
        read_only: yes
    command: [
      '--path.procfs=/host/proc',
      '--path.sysfs=/host/sys',
      '--collector.filesystem.ignored-mount-points',
      '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ]
    logging: *default-logging

  grafana:
    image: grafana/grafana:6.4.2
    restart: always
    expose:
      - "3000"
    environment:
      GF_SERVER_ROOT_URL: "http://${ADVERTISED_HOST:-localhost}/grafana/"
      GF_PATHS_PROVISIONING: "/etc/grafana/provisioning"
      GF_PATHS_DATA: "/var/lib/grafana"
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "nimda"
    volumes:
      - type: bind
        source: ./grafana/provisioning/
        target: /etc/grafana/provisioning/
      - type: volume
        source: grafana_localstate
        target: /var/lib/grafana/
    labels:
      traefik.enable: "true"
      traefik.http.routers.grafana.entrypoints: 'http,https'
      traefik.http.routers.grafana.rule: 'PathPrefix(`/grafana/`)'
      traefik.http.routers.grafana.middlewares: 'grafana-sp'
      traefik.http.middlewares.grafana-sp.stripprefix.prefixes: '/grafana'
      traefik.http.services.grafana-svc.loadbalancer.server.port: "3000"
    logging: *default-logging
