include vars.mk

OVERLAY ?= docker-desktop

.PHONY: \
	prepare-monitoring-namespace \
	wait-for-es \
	setup-es-auth-secret \
	install-monitoring \
	remove-monitoring


prepare-monitoring-namespace:
	@echo "Eventually creating Namespace: $(JAEGER_STACK_NS)"
	@-kubectl create namespace "$(JAEGER_STACK_NS)"


install-monitoring:
	@kubectl apply -k ./overlays/$(OVERLAY)
	@make setup-es-auth-secret


wait-for-es:
	@kubectl wait 'pod/jaeger-tracing-backend-es-default-0' \
		--for=condition=Ready --timeout=300s -n "$(JAEGER_STACK_NS)"


## `elasticsearch-auth.yml` is the secret that hosts environment variables that will be used
##                          by Jaeger components to reach its backend storage. It is used to store
##                          ElasticSearch cluster authentication parametters.
##                          This Target does not pushes the secret to the ES cluster, see `setup-es-auth-secret`
elasticsearch-auth.yml: ES_USERNAME = elastic
elasticsearch-auth.yml: elasticsearch-auth.yml.tmpl wait-for-es
	@ES_USERNAME_B64="$(shell printf '$(ES_USERNAME)' | base64)" \
	ES_PASSWORD_B64="$(shell kubectl -n "$(JAEGER_STACK_NS)" get secret jaeger-tracing-backend-es-elastic-user -o go-template='{{.data.elastic}}')" \
	envsubst < $< > $@
	@printf 'ElasticSearch Cluster auth\nUser: %s\nPassword: %s\n----\n' "$(ES_USERNAME)" "$(shell kubectl -n "$(JAEGER_STACK_NS)" get secret jaeger-tracing-backend-es-elastic-user -o go-template='{{.data.elastic | base64decode}}')"


## `setup-es-auth-secret`: Applies the secret generated by `elasticsearch-auth.yml` to the k8s Cluster
setup-es-auth-secret: elasticsearch-auth.yml
	@kubectl apply -n "$(JAEGER_STACK_NS)" -f $<


remove-monitoring:
	@-kubectl delete -k ./overlays/$(OVERLAY)
	@-kubectl delete -f ./elasticsearch-auth.yml -n $(APPLICATION_NS)
	@-rm -rf ./elasticsearch-auth.yml
	@-kubectl delete namespace "$(JAEGER_STACK_NS)"
